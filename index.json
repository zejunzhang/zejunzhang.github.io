[{"content":"\r\n\r\n\u003c!-- TOC --\u003e\r\n\r\n- [history](#history)\r\n- [三要求](#三要求)\r\n\r\n\u003c!-- /TOC --\u003e\r\n## history\r\n- 达芬奇的年代就有了自荐信一说\r\n- 一百年前的西方也会列出身高、体重、婚姻状况等\r\n- 50年代成为申请必需品\r\n- 70年代才开始有了专业的排版和市场规范(打字机的发明)\r\n## 三要求\r\n- visuals(设计)\r\n  + 不是不重要，但没那么重要\r\n  + 重要的不是设计感，而是易读程度\r\n  + 第一步骤：找模板\r\n  + 渠道：学长/学姐、百度、谷歌、学校\r\n  + 禁\r\n    * 不要附封面\r\n    * 不要用表格写简历\r\n    * 不要太花哨，hr只在乎易读程度，太花哨容易让人反感\r\n    * 不要写自我评价，nobody care 你怎么自我评价，他们只在乎你做过什么\r\n    * 不要写旅行体会、成长感悟\r\n  + 宜\r\n    * 排版简洁\r\n    * 格式统一(字体、大小、颜色、日期格式、上下左右间距)\r\n    * 分区合理(教育、工作、活动/领导力、其他)一样 --\u003e 你也很专业\r\n    * 不要担心简历和别人一样，尽量让自己的简历和专业人士\r\n- contents(内容)\r\n    * 工作经验描述尽可能的详细\r\n    * 项目经历最好加上result(结果)，比如改善了什么xxx,优化了xxx,提高了xxx,效率提升了xxx\r\n- background(背景)\r\n","cover":"/images/vue.jpg","link":"简历.html","preview":"\u003cp\u003e如何写简历\u003c/p\u003e\n","title":"如何写简历"},{"content":"\r\n\r\n指令名 | 含义 | 示例代码\r\n---------|----------|---------\r\n ng-app | 限定angular所管理的范围 | C1\r\n ng-init | 初始化数据模型 | C2\r\n ng-model | 数据模型 | C3\r\n ng-click | 点击 | \r\n ng-dblclick | 双击 |\r\n ng-change | select,checkbox标签独有的，不支持双向绑定 |\r\n ng-submit | 提交表单相关 |\r\n ng-cloak | 样式相关 |\r\n ng-class | 类 |\r\n ng-show | 显示隐藏 |\r\n ng-hide | 显示隐藏 |\r\n ng-bind | 绑定数据模型 |\r\n ng-switch | 判断 |\r\n ng-switch-when | 判断 |\r\n ng-if | 显示隐藏、判断 |\r\n","cover":"","link":"angular_内置指令汇总.html","preview":"\u003cp\u003eangular内置指令汇总\u003c/p\u003e\n","title":"angular内置指令汇总"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n- [安装](#安装)\r\n- [初始化(交互式创建，默认一路按回车即可)](#初始化交互式创建默认一路按回车即可)\r\n- [安装jquery](#安装jquery)\r\n    - [安装特定版本的jquery](#安装特定版本的jquery)\r\n    - [根据`bower.json`来安装依赖项](#根据bowerjson来安装依赖项)\r\n\r\n\u003c!-- /TOC --\u003e\r\n## 安装\r\n```\r\n$ npm install -g bower\r\n```\r\n\r\n## 初始化(交互式创建，默认一路按回车即可)\r\n```\r\n$ bower init\r\n```\r\n\r\n然后会发现文件夹当中会多出来一个bower.json的文件\r\n\r\n```\r\n{\r\n  \"name\": \"demo1\",\r\n  \"authors\": [\r\n    \"zhengwei1949 \u003czhengwei1949@qq.com\u003e\"\r\n  ],\r\n  \"description\": \"\",\r\n  \"main\": \"\",\r\n  \"license\": \"MIT\",\r\n  \"homepage\": \"\",\r\n  \"ignore\": [\r\n    \"**/.*\",\r\n    \"node_modules\",\r\n    \"bower_components\",\r\n    \"test\",\r\n    \"tests\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"jquery\": \"^3.2.1\"\r\n  }\r\n}\r\n```\r\n\r\n## 安装jquery\r\n```\r\n$ bower install jquery\r\n```\r\n\r\n### 安装特定版本的jquery\r\n```\r\n$ bower install jquery@1.11.2\r\n```\r\n\r\n### 根据`bower.json`来安装依赖项\r\n```\r\n$ bower install\r\n```","cover":"/images/bower-logo.svg","link":"bower使用手记.html","preview":"\u003cp\u003ebower是一个用来下载前端的库(框架)的下载器\u003c/p\u003e\n","title":"bower使用手记"},{"content":"\r\n\r\n# 如果不用promise\r\n\r\n\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n  \u003cstyle\u003e\r\n    .ball{\r\n      width: 40px;\r\n      height: 40px;\r\n      border-radius: 20px;\r\n    }\r\n    .ball1{\r\n      background: red;\r\n    }\r\n    .ball2{\r\n      background: yellow;\r\n    }\r\n    .ball3{\r\n      background: green;\r\n    }\r\n  \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"ball ball1\"\u003e\u003c/div\u003e\r\n  \u003cdiv class=\"ball ball2\"\u003e\u003c/div\u003e\r\n  \u003cdiv class=\"ball ball3\"\u003e\u003c/div\u003e\r\n  \u003cscript\u003e\r\n    var ball1 = document.querySelector('.ball1');\r\n    var ball2 = document.querySelector('.ball2');\r\n    var ball3 = document.querySelector('.ball3');\r\n    function animate(ball,distance,callback){\r\n      setTimeout(function(){\r\n        var marginLeft = parseInt(getComputedStyle(ball).marginLeft);\r\n        // console.log(marginLeft,distance);\r\n        if(marginLeft === distance){\r\n          callback();\r\n        }else{\r\n          if(marginLeft \u003c distance){\r\n            marginLeft ++;\r\n          }else{\r\n            marginLeft--;\r\n          }\r\n          ball.style.marginLeft = marginLeft + \"px\";\r\n          animate(ball,distance,callback);\r\n        }\r\n\r\n      },13);\r\n    }\r\n    animate(ball1,100,function(){\r\n      animate(ball2,200,function(){\r\n        animate(ball3,300,function(){\r\n          animate(ball3,150,function(){\r\n            animate(ball2,150,function(){\r\n              animate(ball1,150,function(){\r\n\r\n              })\r\n            })\r\n          })\r\n        })\r\n      })\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\n```\r\n\r\n## 用了promise\r\n```javascript\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n  \u003cstyle\u003e\r\n    .ball{\r\n      width: 40px;\r\n      height: 40px;\r\n      border-radius: 20px;\r\n    }\r\n    .ball1{\r\n      background: red;\r\n    }\r\n    .ball2{\r\n      background: yellow;\r\n    }\r\n    .ball3{\r\n      background: green;\r\n    }\r\n  \u003c/style\u003e\r\n  \u003cscript src=\"./node_modules/bluebird/js/browser/bluebird.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"ball ball1\"\u003e\u003c/div\u003e\r\n  \u003cdiv class=\"ball ball2\"\u003e\u003c/div\u003e\r\n  \u003cdiv class=\"ball ball3\"\u003e\u003c/div\u003e\r\n  \u003cscript\u003e\r\n    var ball1 = document.querySelector('.ball1');\r\n    var ball2 = document.querySelector('.ball2');\r\n    var ball3 = document.querySelector('.ball3');\r\n    function promiseAnimate(ball,distance){\r\n    //构造函数声明模式，它在用来包裹非 promise API \r\n      return new Promise(function(resolve,reject){\r\n        function animate(){\r\n          setTimeout(function(){\r\n            var marginLeft = parseInt(getComputedStyle(ball).marginLeft);\r\n            if(marginLeft === distance){\r\n              resolve();\r\n            }else{\r\n              if(marginLeft \u003c distance){\r\n                marginLeft ++;\r\n              }else{\r\n                marginLeft--;\r\n              }\r\n              ball.style.marginLeft = marginLeft + \"px\";\r\n              animate();\r\n            }\r\n\r\n          },13);\r\n        }\r\n        animate()\r\n      });\r\n    }\r\n\r\n    promiseAnimate(ball1,100)\r\n      .then(function(){\r\n        console.log(111);\r\n        return promiseAnimate(ball2,200);\r\n      })\r\n      .then(function(){\r\n        return promiseAnimate(ball3,300);\r\n      })\r\n      .then(function(){\r\n        return promiseAnimate(ball3,150);\r\n      })\r\n      .then(function(){\r\n        return promiseAnimate(ball2,150);\r\n      })\r\n      .then(function(){\r\n        return promiseAnimate(ball1,150);\r\n      })\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\n```\r\n\r\n# jQuery中的promise\r\n\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cscript src=\"node_modules/jquery/dist/jquery.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var loadData = function(){\r\n      return $.ajax({\r\n        url:\"./a.json\",\r\n        type:\"get\"\r\n      })\r\n    }\r\n    loadData().then(function(data){\r\n      console.log(data);\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n```\r\n##  生成器\r\n```javascript\r\nfunction* inc () {\r\n let number = 0\r\n while (true)\r\n yield number++\r\n}\r\n\r\nlet test = inc()\r\n\r\nconsole.log(test.next().value) // -\u003e 0\r\nconsole.log(test.next().value) // -\u003e 1\r\nconsole.log(test.next().value) // -\u003e 2\r\nconsole.log(test.next().value) // -\u003e 2\r\nconsole.log(test.next().value) // -\u003e 2\r\nconsole.log(test.next().value) // -\u003e 2\r\nconsole.log(test.next().value) // -\u003e 2\r\nconsole.log(test.next().value) // -\u003e 2\r\n\r\n```","cover":"/images/bower-logo.svg","link":"理解promise.html","preview":"\u003cp\u003e理解promise\u003c/p\u003e\n","title":"理解promise"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n- [github源码地址](#github源码地址)\r\n- [说明](#说明)\r\n- [package.json示例如下：](#packagejson示例如下)\r\n- [开发阶段代码如下](#开发阶段代码如下)\r\n    - [index.html代码示例](#indexhtml代码示例)\r\n    - [包装jquery.js](#包装jqueryjs)\r\n    - [主模块main.js](#主模块mainjs)\r\n    - [第三方模块a.js代码如下：](#第三方模块ajs代码如下)\r\n- [上线打包阶段](#上线打包阶段)\r\n\r\n\u003c!-- /TOC --\u003e\r\n## github源码地址\r\nhttps://github.com/black-pony/seajs-gulp-pack\r\n## 说明\r\n大家先把我的代码下载下来，对着这篇文档搞明白了再去玩自己的项目，否则会遇到问题的\r\n\r\n## package.json示例如下：\r\n```json\r\n{\r\n  \"name\": \"iheima\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"jquery\": \"^3.1.1\",\r\n    \"seajs\": \"^3.0.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"gulp\": \"^3.9.1\",\r\n    \"gulp-cmd-pack\": \"^1.0.9\",\r\n    \"gulp-uglify\": \"^2.0.0\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 开发阶段代码如下\r\n### index.html代码示例\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cscript src=\"./node_modules/seajs/dist/sea-debug.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        seajs.config({\r\n            base:'./js',\r\n            alias:{\r\n                jquery:'../node_modules/jquery/dist/jquery'\r\n            }\r\n        });\r\n        seajs.use('main');\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 包装jquery.js\r\n这块直接拷贝我包装好的文件，不要自己尝试去修改，否则打包好了会报错的\r\n\r\n### 主模块main.js\r\n```javascript\r\ndefine(function(require,module,exports){\r\n    \"use strict\";\r\n    var a = require('./a');\r\n    $(document).click(function(){\r\n        alert('1');\r\n    });\r\n    console.log(2322);\r\n    console.log(a);\r\n});\r\n```\r\n\r\n### 第三方模块a.js代码如下：\r\n```javascript\r\ndefine(function(require,exports,module){\r\n    \"use strict\";\r\n    module.exports = {title:22};\r\n});\r\n```\r\n\r\n## 上线打包阶段\r\n1. 修改index.html代码如下：\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cscript src=\"./node_modules/seajs/dist/sea-debug.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        // seajs.config({\r\n        //     base:'./js',\r\n        //     alias:{\r\n        //         jquery:'../node_modules/jquery/dist/jquery'\r\n        //     }\r\n        // });\r\n        // seajs.use('main');\r\n\r\n         seajs.config({\r\n            base:'./dist/'\r\n        });\r\n        seajs.use('main')\r\n\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n2. gulpfile.js如下：\r\n\r\n```javascript\r\n\"use strict\";\r\nvar gulp = require('gulp');\r\nvar cmdPack = require('gulp-cmd-pack');\r\nvar uglify = require('gulp-uglify');\r\n \r\ngulp.task('cmd', function () {\r\n    gulp.src('./js/main.js') //main文件 \r\n        .pipe(cmdPack({\r\n            mainId: 'main', //初始化模块的id \r\n            base: './js', //base路径 \r\n            alias: {\r\n                jquery: '../node_modules/jquery/dist/jquery'\r\n            }\r\n        }))\r\n        .pipe(uglify({ //压缩文件，这一步是可选的 \r\n            mangle: {\r\n                except: ['require']\r\n            }\r\n        }))\r\n        .pipe(gulp.dest('./dist'));//输出到目录 \r\n});\r\n ```","cover":"","link":"打包sea.js.html","preview":"\u003cp\u003e打包sea.js代码\u003c/p\u003e\n","title":"打包sea.js"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n\r\n\u003c!-- /TOC --\u003e\r\n\r\n1. 百度搜索一下TeleportUltra软件，安装一下\r\n2. 打开这个软件\r\n![](http://i1.piimg.com/567571/d0be50516a7e2b70.png)\r\n3. 点击左上角那一道闪电\r\n![](http://i1.piimg.com/567571/1d03dc7a0aa55f36.png)\r\n4. 在弹出来的几个选项当中，选择`复制一个网站，包含该网站的目录结构`\r\n5. 把你要下载的网站的网址输入进去\r\n![](http://p1.bpimg.com/567571/79bec75601b46bdf.png)\r\n![](http://p1.bqimg.com/567571/77e15f9ca8e2c5fd.png)\r\n![](http://p1.bpimg.com/567571/9a177a27f9d92ccd.png)\r\n6. 点击三角启动，过一会儿，整个网站都会被下载下来\r\n![](http://p1.bqimg.com/567571/a6f4b028091b93f6.png)","cover":"","link":"扒网站教程.html","preview":"\u003cp\u003e扒网站\u003c/p\u003e\n","title":"扒网站教程"},{"content":"\r\n\r\n\u003c!-- TOC --\u003e\r\n\r\n- [四大api](#四大api)\r\n- [使用gulp的步骤](#使用gulp的步骤)\r\n- [使用gulp压缩css --\u003e gulp-cssnano 或者 gulp-cssmin](#使用gulp压缩css----gulp-cssnano-或者-gulp-cssmin)\r\n- [使用gulp合并css --\u003e gulp-concat](#使用gulp合并css----gulp-concat)\r\n- [使用gulp 压缩合并css](#使用gulp-压缩合并css)\r\n- [使用gulp压缩js --\u003e gulp-uglify](#使用gulp压缩js----gulp-uglify)\r\n- [使用gulp合并js --\u003e gulp-concat](#使用gulp合并js----gulp-concat)\r\n- [使用gulp压缩合并js --\u003e gulp-uglify + gulp-concat](#使用gulp压缩合并js----gulp-uglify--gulp-concat)\r\n- [使用gulp压缩html --\u003e gulp-htmlmin](#使用gulp压缩html----gulp-htmlmin)\r\n- [使用gulp进行监视文件的改变 --\u003e gulp.watch](#使用gulp进行监视文件的改变----gulpwatch)\r\n- [常用gulp插件](#常用gulp插件)\r\n\r\n\u003c!-- /TOC --\u003e\r\n\r\n![gulp功能一览图](/images/1245223-f1682d270e570f41.jpg)\r\n\r\n## 四大api\r\n- gulp.src 指定要处理的文件的路径\r\n\r\n```javascript\r\ngulp.src('client/templates/*.jade')\r\n    .pipe(jade())\r\n    .pipe(minify())\r\n    .pipe(gulp.dest('build'));\r\n```\r\n\r\n```javascript\r\ngulp.src('client/*.js','client/bad.js'')\r\n```\r\n\r\n- gulp.dest 指定把处理的文件放到哪个文件夹\r\n- gulp.task 指定任务名\r\n\r\n```javascript\r\ngulp.task('someTaskName',function(){\r\n\r\n});\r\n```\r\n\r\n- gulp.watch 类似于事件，当监视的文件发生改变的时候，触发后面的回调函数\r\n\r\n## 使用gulp的步骤\r\n![gulp工作流](/images/gulp-cli.png)\r\n\r\n## 使用gulp压缩css --\u003e gulp-cssnano 或者 gulp-cssmin\r\n[文档地址](https://github.com/chilijung/gulp-cssmin/)\r\n\r\n```javascript\r\nvar gulp = require('gulp');\r\nvar cssmin = require('gulp-cssmin');\r\ngulp.task('default',function(){\r\n    gulp.src('src/**/*.css')\r\n        .pipe(cssmin())\r\n        .pipe(gulp.dest('dist'));\r\n});\r\n```\r\n## 使用gulp合并css --\u003e gulp-concat\r\n\r\n```javascript\r\nvar concat = require('gulp-concat');\r\ngulp.task('scripts',function(){\r\n    gulp.src('./lib/*.js')\r\n        .pipe(concat('all.js'))\r\n        .pipe(gulp.dest('./dist/'));\r\n});\r\n```\r\n\r\n## 使用gulp 压缩合并css \r\n顺序：先合并再压缩\r\n\r\n## 使用gulp压缩js --\u003e gulp-uglify\r\n\r\n## 使用gulp合并js --\u003e gulp-concat\r\n\r\n## 使用gulp压缩合并js --\u003e gulp-uglify + gulp-concat\r\n\r\n## 使用gulp压缩html --\u003e gulp-htmlmin\r\n\r\n## 使用gulp进行监视文件的改变 --\u003e gulp.watch\r\n\r\n## 常用gulp插件\r\n\r\n插件名称 | 作用 \r\n---------|----------\r\n gulp-uglify  | js压缩\r\n gulp-minify-css | css压缩 \r\n gulp-minify-html | html压缩\r\n gulp-jshint | js代码检查\r\n gulp-concat | 文件合并\r\n gulp-less | 编译less\r\n gulp-sass | 编译sass\r\n gulp-imagemin | 压缩图片\r\n gulp-autoprefixer | css自动加前缀\r\n  ","cover":"/images/iruTC031_400x400.png","link":"gulp使用总结.html","preview":"\u003cp\u003egulp是一个用来前端的工作流构建工具。\u003c/p\u003e\n","title":"gulp总结"},{"content":"\r\n\r\n- addClass() 给元素添加指定的类。\r\n- after() 在元素的后面插入内容。\r\n- append() 将内容插入到元素的尾部。\r\n- attr() 获取或者设置元素的属性\r\n- bind()/on() 给选中元素的一个或者多个事件附加一个事件处理程序。\r\n- children() 获取元素的子元素。\r\n- clone() 创建一个元素的深复制。\r\n- contents() 获取每个元素的子节点，返回的集合中包含文本和注释节点。\r\n- css() 获取或设置元素的 style 属性值。\r\n- data() 存储或返回与元素关联的指定数据值。\r\n- eq() 获取指定索引位置的元素。\r\n- find() 过滤元素的子节点，只能通过标签名过滤。\r\n- hasClass() 确定元素本身是否分配了给定的类。\r\n- html() 获取或者设置元素的HTML内容。\r\n- next() 获取紧跟元素的兄弟元素。\r\n- off()/unbind() 通过名称移除一个事件处理程序。\r\n- parent() 获取元素的父元素。\r\n- prepend() 将内容插入到元素的开头。\r\n- prop() 获取或设置元素的属性\r\n- ready() 指定一个DOM加载完成时执行的函数。\r\n- remove() 从DOM中移除元素。\r\n- removeAttr() 从元素中移除一个属性（attribute）。\r\n- removeClass() 从元素中移除一个、多个或者所有类。\r\n- removeData() 从元素中移除先前存储的数据。\r\n- repalceWith() 使用提供的新内容替换元素。\r\n- text() 获取或者设置元素中合并的文本内容。\r\n- toggleClass() 从元素中添加或者移除一个或者多个类。\r\n- triggerHandler() 执行附加给元素的某个事件的所有事件处理程序。(triggerHandler() 方法与 trigger() 方法类似。不同的是它不会触发事件（比如表单提交）的默认行为，而且只影响第一个匹配元素。)\r\n- val() 获取或设置元素的当前值。\r\n- wrap() 使用指定的HTML结构包裹元素。","cover":"/images/bower-logo.svg","link":"angular_jquery.html","preview":"\u003cp\u003eangular中使用jquery\u003c/p\u003e\n","title":"angular中使用jquery"},{"content":"\r\n\r\n\u003c!-- TOC --\u003e\r\n\r\n- [安装](#安装)\r\n- [罗列可以使用的starter项目](#罗列可以使用的starter项目)\r\n- [安装webpack-simple类型的starter](#安装webpack-simple类型的starter)\r\n- [安装webpack类型的starter](#安装webpack类型的starter)\r\n\r\n\u003c!-- /TOC --\u003e\r\n\r\n## 安装\r\n```\r\nnpm install -g vue-cli\r\n```\r\n\r\n## 罗列可以使用的starter项目\r\n```\r\nvue list\r\n```\r\n\r\n```\r\nC:\\Users\\Administrator\u003evue list\r\n\r\n  Available official templates:\r\n\r\n  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting \u0026 unit testing.\r\n  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.\r\n  ★  simple - The simplest possible Vue setup in a single HTML file\r\n  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing \u0026 css extraction.\r\n  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.\r\n\r\n```\r\n\r\n## 安装webpack-simple类型的starter\r\n```\r\nvue init webpack-simple myApp\r\n```\r\n\r\n## 安装webpack类型的starter\r\n```\r\nvue init webpack myApp\r\n```","cover":"/images/vue.jpg","link":"vue cli使用总结.html","preview":"\u003cp\u003evue项目脚手架\u003c/p\u003e\n","title":"vue cli使用总结"},{"content":"\r\n\r\n\u003c!-- TOC --\u003e\r\n\r\n- [学习目标](#学习目标)\r\n- [学习建议](#学习建议)\r\n- [相关代码下载地址](#相关代码下载地址)\r\n- [问题反馈](#问题反馈)\r\n- [从angular 1.x中学到的概念review](#从angular-1x中学到的概念review)\r\n    - [框架与库的区别](#框架与库的区别)\r\n    - [SPA与多页面的区别](#spa与多页面的区别)\r\n    - [mvc,mvvm](#mvcmvvm)\r\n    - [mvc和mvvm的作用：](#mvc和mvvm的作用)\r\n    - [如何安装angular.js](#如何安装angularjs)\r\n    - [数据绑定之单向数据绑定](#数据绑定之单向数据绑定)\r\n    - [双向数据绑定](#双向数据绑定)\r\n    - [$watch](#watch)\r\n    - [filter过滤器](#filter过滤器)\r\n    - [指令](#指令)\r\n    - [自定义指令](#自定义指令)\r\n        - [示例](#示例)\r\n        - [常见属性](#常见属性)\r\n    - [ngRoute路由](#ngroute路由)\r\n    - [todoMVC的实现思路](#todomvc的实现思路)\r\n- [vue基础知识](#vue基础知识)\r\n    - [说明](#说明)\r\n    - [谁在用](#谁在用)\r\n    - [安装](#安装)\r\n    - [chrome相关插件](#chrome相关插件)\r\n        - [使用注意](#使用注意)\r\n    - [visual studio code编辑器相关插件](#visual-studio-code编辑器相关插件)\r\n    - [vue的特点](#vue的特点)\r\n    - [hello world](#hello-world)\r\n        - [示例](#示例-1)\r\n    - [讲解](#讲解)\r\n        - [注意事项](#注意事项)\r\n    - [单次绑定](#单次绑定)\r\n    - [实现值加1](#实现值加1)\r\n    - [实现值加1升级版](#实现值加1升级版)\r\n    - [为什么vue的性能这么高？](#为什么vue的性能这么高)\r\n    - [双向数据绑定的原理](#双向数据绑定的原理)\r\n    - [表单控件](#表单控件)\r\n    - [v-bind指令](#v-bind指令)\r\n    - [watch监视](#watch监视)\r\n    - [计算属性](#计算属性)\r\n        - [用计算属性替代监视](#用计算属性替代监视)\r\n        - [用计算属性替代filter](#用计算属性替代filter)\r\n    - [v-bind:class](#v-bindclass)\r\n    - [v-if,v-else](#v-ifv-else)\r\n    - [v-show](#v-show)\r\n    - [v-for](#v-for)\r\n    - [v-cloak](#v-cloak)\r\n    - [事件处理器 v-on](#事件处理器-v-on)\r\n    - [事件对象event](#事件对象event)\r\n    - [修饰符](#修饰符)\r\n    - [组件](#组件)\r\n        - [组件使用注意事项](#组件使用注意事项)\r\n    - [子组件向父组件要数据](#子组件向父组件要数据)\r\n    - [slot](#slot)\r\n    - [vue-cli](#vue-cli)\r\n    - [开启debug模式](#开启debug模式)\r\n    - [是否开启HTML5的history模式,开启后，需服务器端支持，否则报404](#是否开启html5的history模式开启后需服务器端支持否则报404)\r\n    - [vue-router的钩子函数](#vue-router的钩子函数)\r\n\r\n\u003c!-- /TOC --\u003e\r\n## 学习目标\r\n- 熟悉常见的vue.js框架的API\r\n- 了解如何安装使用单文件组件\r\n- 能自己完成todoMVC项目\r\n\r\n## 学习建议\r\n- 课程中使用的是v2.1.6版本\r\n- 如果网上找的教程或书的代码执行不了，很正常，因为过时了\r\n\r\n## 相关代码下载地址\r\n[下载地址](https://github.com/black-pony/learn_vue_the_hard_way)\r\n\r\n## 问题反馈\r\n- 方式一：在博客下面留言\r\n- 方式二：给我写邮件 js-class@qq.com\r\n\r\n## 从angular 1.x中学到的概念review\r\n### 框架与库的区别\r\n库就是一堆的工具，比如我们使用了jQuery,但是并不能改变我们以往（第一步选择元素，第二步添加事件）的思路，只不过方便了我们写代码。\r\n框架就是一套规则和规范，我们用了某框架之后，我们必须要按这套框架的规则去做，比如bootstrap,我们只要使用了bootstrap，我们按照它的教程定义一些class，就会得到一个响应式的页面。\r\n\r\n###  SPA与多页面的区别\r\n\r\n多页面应用就是一个网站里面，有一堆的页面，页面与页面之间是独立的，缺点就是当我们从一个页面跳转到另外一个页面的时候，另一个页面所有的东西全部需要从服务器加载，这样会出现白屏的现象，用户体验不好。\r\nSPA就是single page application,单页面应用，比如我们打开网易云音乐，我们点击上面的链接会发现，页面并没有跳转，只不过是hash在发生改变，我们通过js监听hashchange事件，当触发的时候，我们就去服务器加载对应的数据，然后替换掉对应的DOM区域，但是页面的主体结构并不需要变动。\r\n\r\n### mvc,mvvm\r\nmvc就是把整个代码划分成模型、视图、控制器这三大块，模型负责管理数据（增删改查），视图就是我们的模板，控制器负责连接模型和视图。\r\n1、view传送指令到controller\r\n2、controller完成业务逻辑后，要求model改变状态\r\n3、model将新的数据发送到view,用户得到反馈\r\n\r\nmvvm是把整个代码划分成模型、视图、view model三大块：\r\nmvvm采用双向数据绑定，view的变动，自动反映在view model，反之亦然。\r\n\r\n### mvc和mvvm的作用：\r\n1、解耦：让我们的代码结构比较清晰\r\n2、便于我们的维护\r\n\r\n### 如何安装angular.js\r\n1、暴力安装\r\n2、通过bower安装(淘汰了)\r\n3、npm安装\r\n4、cdn安装\r\n\r\n### 数据绑定之单向数据绑定\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n        div{\r\n            width: 200px;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            outline: 1px solid green;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\" ng-controller=\"myController\"\u003e\r\n    \u003c!--当我们修改下面的div的值的时候，不会影响model里面message值--\u003e\r\n    \u003cdiv contenteditable \u003e{{message}}\u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        window.onload= function(){\r\n            document.getElementsByTagName(\"div\")[0].focus()\r\n        };\r\n        var myApp = angular.module('myApp',[]);\r\n        myApp.controller('myController',['$scope',function($scope){\r\n            $scope.message = 'Hello world';\r\n        }]);\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### 双向数据绑定\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n        div{\r\n            width: 200px;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            outline: 1px solid green;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\" ng-controller=\"myController\"\u003e\r\n    \u003c!--当我们修改下面的input的值的时候，会影响model里面message值--\u003e\r\n    \u003cinput type=\"text\" ng-model=\"message\"\u003e\r\n    \u003cdiv contenteditable \u003e{{message}}\u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        window.onload= function(){\r\n            document.getElementsByTagName(\"input\")[0].focus()\r\n        };\r\n        var myApp = angular.module('myApp',[]);\r\n        myApp.controller('myController',['$scope',function($scope){\r\n            $scope.message = 'Hello world';\r\n        }]);\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### $watch\r\n\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n        div{\r\n            width: 200px;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            outline: 1px solid green;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\" ng-controller=\"myController\"\u003e\r\n    \u003c!--当我们修改下面的input的值的时候，会影响model里面message值--\u003e\r\n    \u003cinput type=\"text\" ng-model=\"message\"\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        window.onload= function(){\r\n            document.getElementsByTagName(\"input\")[0].focus()\r\n        };\r\n        var myApp = angular.module('myApp',[]);\r\n        myApp.controller('myController',['$scope',function($scope){\r\n            $scope.message = 'Hello world';\r\n            $scope.$watch('message',function(now,prev){\r\n                console.log(now,prev);\r\n            });\r\n        }]);\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### filter过滤器\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n        div{\r\n            width: 200px;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            outline: 1px solid green;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\" ng-controller=\"myController\"\u003e\r\n    \u003c!--当我们修改下面的input的值的时候，会影响model里面message值--\u003e\r\n    {{'1484657346797'|date}}\r\n    \u003cul\u003e\r\n        \u003cli ng-repeat=\"item in arr | filter : {isTrue:true}\"\u003e{{item.name}}\u003c/li\u003e\r\n    \u003c/ul\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        window.onload= function(){\r\n            document.getElementsByTagName(\"input\")[0].focus()\r\n        };\r\n        var myApp = angular.module('myApp',[]);\r\n        myApp.controller('myController',['$scope',function($scope){\r\n            $scope.arr = [\r\n                {name:'itcast',isTrue:true},\r\n                {name:'heima',isTrue:false},\r\n                {name:'chuanzhi',isTrue:true},\r\n                {name:'black-pony',isTrue:false}\r\n            ];\r\n        }]);\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### 指令\r\n- ng-app\r\n- ng-model\r\n- ng-init\r\n- ng-controller\r\n- ng-bind\r\n- ng-repeat\r\n    + $index\r\n    + $odd\r\n    + $even\r\n    + $first\r\n    + $last\r\n- ng-class\r\n- ng-style\r\n- ng-show\r\n- ng-hide\r\n- ng-if\r\n- ng-switch\r\n- ng-switch-when\r\n- ng-src\r\n- ng-href\r\n- ng-bind-html(须引入ng-sanitize模块)\r\n\r\n### 自定义指令\r\n\r\n####  示例\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n        div{\r\n            width: 200px;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            outline: 1px solid green;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\" ng-controller=\"myController\"\u003e\r\n    \u003cinput type=\"text\" my-focus\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var myApp = angular.module('myApp',[]);\r\n        myApp.controller('myController',['$scope',function($scope){\r\n\r\n        }]);\r\n        myApp.directive('myFocus',function(){\r\n            return {\r\n                restrict:'A',\r\n                link:function(scope,element,attributes){\r\n                    element[0].focus();\r\n                }\r\n            };\r\n        });\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n#### 常见属性\r\n- template\r\n- templateUrl\r\n- replace\r\n- restrict\r\n- transclude\r\n- scope\r\n- link\r\n\r\n### ngRoute路由\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody ng-app=\"myApp\"\u003e\r\n    \u003cdiv ng-view\u003e\u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/angular/angular.js\"\u003e\u003c/script\u003e\r\n    \u003cscript src=\"./node_modules/angular-route/angular-route.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var myApp = angular.module('myApp',['ngRoute']);\r\n        myApp.config(['$routeProvider',function($routeProvider){\r\n            $routeProvider\r\n                .when('/foo',{\r\n                    template:'\u003ch1\u003efoo\u003c/h1\u003e',\r\n                    controller:'fooController'\r\n                })\r\n                .when('/bar',{\r\n                    template:'\u003ch1\u003ebar\u003c/h1\u003e',\r\n                    controller:'fooController'\r\n                })\r\n                .otherwise({\r\n                    template:'\u003ch1\u003efoo\u003c/h1\u003e',\r\n                    controller:'fooController'\r\n                });\r\n        }]);\r\n        myApp.controller('fooController',['$scope',function($scope){\r\n\r\n        }]);\r\n        myApp.controller('barController',['$scope',function($scope){\r\n            \r\n        }]);\r\n\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### todoMVC的实现思路\r\n- 本质上是进行数组的增删改查\r\n- 显示 --\u003e ng-repeat\r\n- 删除 --\u003e replace\r\n- 修改 --\u003e ng-class\r\n- 增加 --\u003e push\r\n\r\n## vue基础知识\r\n\r\n### 说明\r\n- 本教程采用的是vue 2.1.9,请下载这个版本的进行学习，否则可能导致API用不了或过时\r\n- 在学习阶段，不建议一上来就学习单文件组件模式\r\n\r\n### 谁在用\r\n- 阿里爸爸\r\n- 饿了吗\r\n- talking Data\r\n\r\n### 安装\r\n\u003e npm init -y\r\n\u003e  npm install -S vue@2.1.9\r\n\r\n### chrome相关插件\r\nvue-dev tools\r\n \r\n#### 使用注意\r\n 一定要在服务器环境下面使用才能点亮这个插件\r\n \r\n### visual studio code编辑器相关插件\r\n- vue\r\n- vue components\r\n- vue 2 snippets\r\n- vueHelper\r\n- vetur\r\n \r\n### vue的特点\r\n-  简单轻量的js框架\r\n- 数据驱动(自动追踪依赖的模板表达式和计算属性)\r\n- 每个组件代表独立的单元、有各自的view及数据逻辑,用可解耦、可复用的组件来构造界面,你总是应该从UI出发抽象出不同的组件，然后像搭积木一样把它们拼装起来\r\n- 最适合用来开发SPA\r\n \r\n###  hello world\r\n \r\n#### 示例\r\n```html\r\n \u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n        \u003cinput type=\"text\" v-model=\"message\"\u003e\r\n        {{message}}\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'#myApp',\r\n            data:{\r\n                message:'Hello world'\r\n            }\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 讲解\r\n- el --\u003e 要绑定的元素，限定我们的vue项目的范围,这里可以用id，也可以用class，一般默认用id\r\n- data --\u003e 要绑定的数据模型\r\n- {{message}} --\u003e 插值表达式,可以用来获取我们的model中的数据\r\n- new Vue() --\u003e 每个vue项目都是通过构造器Vue来创建一个vue实例的\r\n- v-model --\u003e 类似ng-model,可以用来进行双向数据绑定\r\n- data --\u003e 我们的model\r\n\r\n#### 注意事项\r\n- vue不能挂载到body上面，会出现warnning警告\r\n\r\n### 单次绑定\r\n页面上的有些东西一旦赋值渲染之后，基本上不太可能会变动了，比如像我们的图片的url,像链接的href值，这个时候，我们可以使用单次绑定\r\n\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv class=\"myApp\"\u003e\r\n        \u003cinput type=\"text\" v-model=\"message\"\u003e\r\n        \u003cdiv v-once\u003e\r\n            {{message}}\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'.myApp',\r\n            data:{\r\n                message:'Hello world'\r\n            }\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 实现值加1\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv class=\"myApp\"\u003e\r\n        \u003cinput type=\"button\" v-on:click=\"counter = (counter - 0) + 1\" v-model=\"counter\"\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'.myApp',\r\n            data:{\r\n                counter:1\r\n            }\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 实现值加1升级版\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv class=\"myApp\"\u003e\r\n        \u003cinput type=\"button\" v-on:click=\"add\" v-model=\"counter\"\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'.myApp',\r\n            data:{\r\n                counter:1\r\n            },\r\n            methods:{\r\n                add:function(){\r\n                    this.counter++;\r\n                }\r\n            }\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 为什么vue的性能这么高？\r\n实现双向数据绑定，目前主要有三种方式：脏检查、观察机制、封装属性访问器\r\n\r\n- 脏检查：框架将所有需要监控的属性放在一个队列中，当发生特定事件时，我们的框架只要觉得当前这个数据有可能变脏了，它就会遍历整个序列，对被监控的属性做对比，如果发生变化，则调用相应的处理函数。(angular实现了一套类似我们的原生的js的一套event loop)\r\nangular 1.x的双向数据绑定是自己实现出来一套event loop机制，通过apply,watch list监听数据的变化，一旦它认为你的model变了，也就是变“脏”了，就去重新执行一轮event loop,进行脏值检测，所以效率很低。\r\n![](http://ojmkbnynx.bkt.clouddn.com/17-1-17/33059309-file_1484661229826_df58.png)\r\n\r\n- 观察机制：通过 Object.observe() 「已废弃」方法对对象进行监控，一旦其发生变化，将会执行相应的handler。\r\n- 封装属性访问器：使用 Object.defineProperty 将对象的属性转换为 getter/setter ，当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。\r\nvue.js使用的就是这种方式（当然不支持IE8）\r\n\r\n### 双向数据绑定的原理\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n        \u003cinput type=\"text\" eric-model=\"message\"\u003e\r\n        \u003cinput type=\"text\" eric-model=\"message\"\u003e\r\n        \u003cdiv\u003e\r\n            \u003cdiv\u003e{{message}}\u003c/div\u003e\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript\u003e\r\n        var vm = {};\r\n        Object.defineProperty(vm,'message',{\r\n            val:null,\r\n            get:function(){\r\n                this.val = this.val || '';\r\n                return this.val;\r\n            },\r\n            set:function(val){\r\n                this.val = val;\r\n                refresh_view();\r\n            }\r\n        });\r\n        var el = document.querySelector('#myApp');\r\n\r\n        //初始化视图\r\n        function init_view(){\r\n            var list = el.getElementsByTagName('*');\r\n            var reg1 = /\u003c.*\u003e/g;\r\n            var reg2 = /{{(.*)}}/;\r\n            for(var i=0;i\u003clist.length;i++){\r\n                // console.log(list[i].innerHTML);\r\n                if(list[i].tagName!='INPUT' \u0026\u0026 !reg1.test(list[i].innerHTML) \u0026\u0026 reg2.test(list[i].innerHTML)){\r\n                    var myBind = reg2.exec(list[i].innerHTML)[1];\r\n                    list[i].setAttribute('myBind',myBind);\r\n                    // console.log(list[i].getAttribute('myBind'))\r\n                    list[i].innerHTML = vm[list[i].getAttribute('myBind')];\r\n                }\r\n                if(list[i].tagName === 'INPUT' \u0026\u0026 list[i].getAttribute('eric-model')){\r\n                    var myBind = list[i].getAttribute('eric-model');\r\n                    list[i].value = vm[list[i].getAttribute('eric-model')];\r\n                }\r\n            }\r\n        }\r\n\r\n        init_view();\r\n\r\n        function refresh_view(){\r\n            var list = el.getElementsByTagName('*');\r\n            for(var i=0;i\u003clist.length;i++){\r\n                if(list[i].getAttribute('myBind')){\r\n                    list[i].innerHTML = vm[list[i].getAttribute('myBind')];\r\n                }\r\n                if(list[i].getAttribute('eric-model') \u0026\u0026 list[i].tagName === 'INPUT'){\r\n                    list[i].value = vm[list[i].getAttribute('eric-model')];\r\n                }\r\n            }\r\n        }\r\n\r\n        var modelEleList = document.querySelectorAll('input[eric-model]');\r\n        console.log(modelEleList);\r\n        for(var i=0;i\u003cmodelEleList.length;i++){\r\n            modelEleList[i].addEventListener('input',function(){\r\n                var myBind = this.getAttribute('eric-model');\r\n                vm[myBind] = this.value;\r\n            },false);\r\n        }\r\n\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 表单控件\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"form-input\"\u003e\r\n    \u003cspan\u003emessage is {{message}}\u003c/span\u003e\r\n    \u003cbr\u003e\r\n    \u003cinput type=\"text\" v-model=\"message\"\u003e\r\n  \u003c/div\u003e\r\n  \u003chr\u003e\r\n  \u003cdiv class=\"form-chkbox\"\u003e\r\n    \u003cinput type=\"checkbox\" id=\"checkbox\" v-model=\"checked\"\u003e\r\n    \u003clabel for=\"checkbox\"\u003e{{checked}}\u003c/label\u003e\r\n  \u003c/div\u003e\r\n  \u003chr\u003e\r\n  \u003cdiv class=\"form-chkboxes\"\u003e\r\n   \u003cinput type=\"checkbox\" id=\"jack\" v-model=\"checkedNames\" value=\"jack\"\u003e\r\n   \u003cinput type=\"checkbox\" id=\"john\" v-model=\"checkedNames\" value=\"john\"\u003e\r\n    \u003cbr\u003e\r\n    message:{{checkedNames | json}}\r\n  \u003c/div\u003e\r\n  \u003chr\u003e\r\n  \u003cdiv class=\"form-radio\"\u003e\r\n    \u003clabel for=\"one\"\u003eone\u003c/label\u003e\r\n    \u003cbr\u003e\r\n    \u003cinput type=\"radio\" id=\"one\" value=\"one\" v-model=\"picked\"\u003e\r\n    \u003cbr\u003e\r\n    \u003clabel for=\"two\"\u003etwo\u003c/label\u003e\r\n    \u003cinput type=\"radio\" value=\"two\" v-model=\"picked\"\u003e\r\n    \u003cbr\u003e\r\n    \u003cspan\u003ePicked:{{picked}}\u003c/span\u003e\r\n  \u003c/div\u003e\r\n  \u003chr\u003e\r\n  \u003cdiv class=\"form-select\"\u003e\r\n    \u003cselect v-model=\"selected\"\u003e\r\n      \u003coption\u003eA\u003c/option\u003e\r\n      \u003coption selected\u003eB\u003c/option\u003e\r\n      \u003coption\u003eC\u003c/option\u003e\r\n    \u003c/select\u003e\r\n    \u003cbr\u003e\r\n    \u003cspan\u003eselected:{{selected}}\u003c/span\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n   new Vue({\r\n     el:\".form-input\",\r\n     data:{\r\n       message:\"\"\r\n     }\r\n   });\r\n   new Vue({\r\n     el:\".form-chkbox\",\r\n     data:{\r\n       checked:false\r\n     }\r\n   });\r\n   new Vue({\r\n     el:\".form-chkboxes\",\r\n     data:{\r\n       checkedNames:[]\r\n     }\r\n   });\r\n   new Vue({\r\n     el:\".form-radio\",\r\n     data:{\r\n       picked:''\r\n     }\r\n   });\r\n   new Vue({\r\n     el:\".form-select\",\r\n     data:{\r\n       selected:''\r\n     }\r\n   });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### v-bind指令\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n        \u003cinput type=\"text\" v-bind=\"{id:myId,myAttr:myAttr,value:myValue}\"\u003e\r\n        \u003cimg v-bind:src=\"myImgSrc\"\u003e\r\n        \u003cimg :src=\"myImgSrc\"\u003e\r\n        \u003ca v-bind:href=\"myUrl\"\u003e百度\u003c/a\u003e\r\n        \u003ca :href=\"myUrl\"\u003e百度\u003c/a\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'#myApp',\r\n            data:{\r\n                myId:'demo',\r\n                myAttr:'demoAttr',\r\n                myValue:'wfewf',\r\n                myImgSrc:'http://i0.hdslb.com/bfs/archive/ac6ad98e868f313a332eb757634ddc9fcd5d7753.jpg@.webp',\r\n                myUrl:'http://baidu.com',\r\n            }\r\n        });\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### watch监视\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n       \u003cinput type=\"text\" v-model=\"message1\"\u003e\r\n       \u003cinput type=\"text\" v-model=\"message2\"\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'#myApp',\r\n            data:{\r\n                message1:'hello1',\r\n                message2:'hello2'\r\n            },  \r\n            watch:{\r\n                message1:function(now,pre){\r\n                    console.log(now,pre);\r\n                }\r\n            }\r\n        });\r\n        vm.$watch('message2',function(now,pre){\r\n            console.log(now,pre);\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 计算属性\r\nvue在2.1.5(大概这个版本，记不太清了)的时候，曾经取消了监视，因为作者发现，完全可以采用计算属性来实现：\r\n#### 用计算属性替代监视\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n       \u003cinput type=\"text\" v-model=\"a\"\u003e\r\n       \u003cinput type=\"text\" v-model=\"b\"\u003e\r\n       \u003cinput type=\"text\" v-model=\"result\"\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'#myApp',\r\n            data:{\r\n                a:0,\r\n                b:0\r\n            },  \r\n            computed:{\r\n                result:function(){\r\n                    return Number(this.a) + Number(this.b);\r\n                }\r\n            }\r\n        });\r\n        vm.$watch('message2',function(now,pre){\r\n            console.log(now,pre);\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n#### 用计算属性替代filter\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv id=\"myApp\"\u003e\r\n       \u003cul\u003e\r\n           \u003cli v-for=\"item in arr1\"\u003e{{item}}\u003c/li\u003e\r\n       \u003c/ul\u003e\r\n    \u003c/div\u003e\r\n    \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        var vm = new Vue({\r\n            el:'#myApp',\r\n            data:{\r\n                arr:[2,3,4,5,6]\r\n            },  \r\n            computed:{\r\n                arr1:function(){\r\n                    return this.arr.filter(function(item){return item \u003e 4});\r\n                }\r\n            }\r\n        });\r\n        vm.$watch('message2',function(now,pre){\r\n            console.log(now,pre);\r\n        })\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### v-bind:class\r\n使用原则：静态的class放在HTML的class特效内，而动态的应该使用v-bind:class\r\n```html\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003cdiv v-bind:class=\"{red:isRed}\"\u003e11\u003c/div\u003e\r\n    \u003cdiv v-bind:class=\"{a,b}\"\u003e111\u003c/div\u003e\r\n    \u003cdiv v-bind:class=\"[c,{d:isD,e:isE}]\"\u003e111\u003c/div\u003e\r\n    \u003c!--绑定style--\u003e\r\n    \u003cdiv v-bind:style=\"{fontSize:size + 'px'}\"\u003e111\u003c/div\u003e\r\n    \u003cdiv v-bind:style=\"{{width:'100px'},styleObjectB}\"\u003e11\u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        isRed:true,\r\n        size:20,\r\n        a:true,\r\n        b:false,\r\n        c:\"world\",\r\n        isD:true,\r\n        isE:true,\r\n        styleObjectA:{\r\n          color:'red',\r\n          fontSize:'13px'\r\n        },\r\n        styleObjectB:{\r\n          backgroundColor:'cyan'\r\n        }\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### v-if,v-else\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003clabel for=\"one\"\u003eone\u003c/label\u003e\r\n    \u003cinput type=\"radio\" id=\"one\" v-model=\"picked\" value=\"one\"\u003e\r\n    \u003clabel for=\"two\"\u003etwo\u003c/label\u003e\r\n    \u003cinput type=\"radio\" id=\"two\" v-model=\"picked\" value=\"two\"\u003e\r\n    \u003cdiv v-if=\"picked==='one'\"\u003eyes\u003c/div\u003e\r\n    \u003cdiv v-else\u003eNo\u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        picked:'one'\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n### v-show\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003clabel for=\"one\"\u003eone\u003c/label\u003e\r\n    \u003cinput type=\"radio\" id=\"one\" v-model=\"picked\" value=\"one\"\u003e\r\n    \u003clabel for=\"two\"\u003etwo\u003c/label\u003e\r\n    \u003cinput type=\"radio\" id=\"two\" v-model=\"picked\" value=\"two\"\u003e\r\n    \u003cdiv v-show=\"picked==='one'\"\u003eyes\u003c/div\u003e\r\n    \u003cdiv v-show=\"picked!='one'\"\u003eNo\u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        picked:'one'\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### v-for\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003c!--数组的迭代--\u003e\r\n    \u003cul\u003e\r\n      \u003cli v-for=\"(item,index) in arr\"\u003e{{item}} - {{index}}\u003c/li\u003e\r\n    \u003c/ul\u003e\r\n    \u003c!--对象的迭代--\u003e\r\n    \u003cul\u003e\r\n      \u003cli v-for=\"(value,key) in obj\"\u003e{{key}} - {{value}}\u003c/li\u003e\r\n    \u003c/ul\u003e\r\n    \u003c!--vue特有的迭代--\u003e\r\n    \u003cul\u003e\r\n    \u003cli v-for=\"n in 10\"\u003e{{n}}\u003c/li\u003e\r\n    \u003c/ul\u003e\r\n  \u003c/ul\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        arr:[2,3,4],\r\n        obj:{name:\"eric zheng\",sex:\"male\"}\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### v-cloak\r\n配合[v-cloak] { display: none }使用，类似angular的ng-cloak\r\n\r\n### 事件处理器 v-on\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003cinput type=\"button\" v-on:click=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n    \u003cinput type=\"button\" @click=\"fn\" value=\"@click点击触发\"\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        arr:[2,3,4],\r\n        obj:{name:\"eric zheng\",sex:\"male\"}\r\n      },\r\n      methods:{\r\n        fn:function(){\r\n          alert(\"被点击了\");\r\n        }\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 事件对象event\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003cinput type=\"button\" v-on:click=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n    \u003cinput type=\"button\" @click=\"fn\" value=\"@click点击触发\"\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        arr:[2,3,4],\r\n        obj:{name:\"eric zheng\",sex:\"male\"}\r\n      },\r\n      methods:{\r\n        fn:function(event){\r\n          console.log(event.target);\r\n        }\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 修饰符\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003cinput type=\"button\" v-on:click=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n    \u003c!--相当于写了stopPropagation--\u003e\r\n    \u003cinput type=\"button\" v-on:click.stop=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n    \u003c!--相当于写了preventDefault--\u003e\r\n    \u003cinput type=\"button\" v-on:click.prevent=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n    \u003c!--既阻止冒泡还阻止事件默认行为--\u003e\r\n     \u003cinput type=\"button\" v-on:click.prevent.stop=\"fn\" value=\"v-on:click点击触发\"\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    var app = new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        arr:[2,3,4],\r\n        obj:{name:\"eric zheng\",sex:\"male\"}\r\n      },\r\n      methods:{\r\n        fn:function(event){\r\n          console.log(event.target);\r\n        }\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### 组件\r\n我们在angular当中，可以通过自定义指令来实现在页面上自定义一些元素标签，但是在vue当中，是通过组件的形式来实现的,组件是vue最主要也是最强大的特性之一，它提供了HTML元素的扩充性，也将程序代码封装起来以便开发者重复使用。\r\n\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"app\"\u003e\r\n    \u003ccustom-header\u003e\u003c/custom-header\u003e\r\n    \u003ccustom-main\u003e\u003c/custom-main\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n   var app = new Vue({\r\n     el:'#app',\r\n     components:{\r\n       CustomHeader:Vue.extend({\r\n         template:'\u003cdiv class=\"header\"\u003eheader组件\u003c/div\u003e'\r\n       }),\r\n       CustomMain:Vue.extend({\r\n         template:`\r\n          \u003cul\u003e\r\n            \u003cli\u003e\u003ccustom-block\u003e\u003c/custom-block\u003e\u003c/li\u003e\r\n            \u003cli\u003e\u003ccustom-block\u003e\u003c/custom-block\u003e\u003c/li\u003e\r\n            \u003cli\u003e\u003ccustom-block\u003e\u003c/custom-block\u003e\u003c/li\u003e\r\n            \u003cli\u003e\u003ccustom-block\u003e\u003c/custom-block\u003e\u003c/li\u003e\r\n            \u003cli\u003e\u003ccustom-block\u003e\u003c/custom-block\u003e\u003c/li\u003e\r\n          \u003c/ul\u003e\r\n         `,\r\n         components:{\r\n           CustomBlock:Vue.extend({\r\n             template:'\u003ch1\u003eHello world\u003c/h1\u003e'\r\n           })\r\n         }\r\n       })\r\n\r\n     }\r\n   });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n#### 组件使用注意事项\r\n![](http://ojmkbnynx.bkt.clouddn.com/17-1-17/89984038-file_1484668060104_e92a.png)\r\n\r\n### 子组件向父组件要数据\r\n类似咱们angular中的自定义指令的scope\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv id=\"demo\"\u003e\r\n    \u003cchild :number=\"arr\"\u003e\u003c/child\u003e\r\n  \u003c/div\u003e\r\n  \u003cscript src=\"./node_modules/vue/dist/vue.js\"\u003e\u003c/script\u003e\r\n  \u003cscript\u003e\r\n    new Vue({\r\n      el:\"#demo\",\r\n      data:{\r\n        arr:[2,3,4,5,6]\r\n      },\r\n      components:{\r\n        child:Vue.extend({\r\n          template:\"\u003cdiv\u003e\u003cdiv v-for='item in number'\u003e{{item}}\u003c/div\u003e\u003c/div\u003e\",\r\n          props:{//props就是element上的attrs,换个名字property,变成复数 自定义属性的属性校验\r\n            number:Array//这里指定需要的数据类型，如果写错了，控制台会有错误警告\r\n          }\r\n        })\r\n      }\r\n    });\r\n  \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### slot\r\n允许外部环境插入内容到组件的视图结构内\r\n比如子组件为：\r\n\r\n```html\r\n\u003cdiv\u003e\r\n    \u003ch1\u003e提示\u003c/h1\u003e\r\n    \u003cslot name=\"content\"\u003e\u003c/slot\u003e\r\n    \u003cspan\u003e确定\u003c/span\u003e\r\n    \u003cspan\u003e取消\u003c/span\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\n父组件使用子组件：\r\n\r\n```html\r\n\u003cconfirm\u003e\r\n    \u003cp slot=\"content\"\u003eHelloWorld\u003c/p\u003e\r\n\u003c/confirm\u003e\r\n```\r\n\r\n最终的渲染完成的效果为：\r\n\r\n```html\r\n\u003cdiv\u003e\r\n    \u003ch1\u003e提示\u003c/h1\u003e\r\n    \u003cp\u003ehelloWorld\u003c/p\u003e\r\n    \u003cspan\u003e确定\u003c/span\u003e\r\n    \u003cspan\u003e取消\u003c/span\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\n### vue-cli\r\n第一步、安装vue-cli npm install -g vue-cli\r\n第二步、使用vue-cli初始化项目`vue init webpack-simple mydemo`\r\n第三步、切换到vue项目当中\r\n第四步、执行npm install\r\n第五步、执行npm run build编译成功项目\r\n第六步、执行npm run dev会自动开启项目在浏览器当中（默认是自动刷新的）\r\n\r\n### 开启debug模式\r\n```javascript\r\n    Vue.config.debug = true;\r\n```\r\n\r\n### 是否开启HTML5的history模式,开启后，需服务器端支持，否则报404\r\n```javascript\r\nvar router = new VueRouter({\r\n    history:true\r\n});\r\n```\r\n\r\n### vue-router的钩子函数\r\n- beforeEach 在路由切换开始时调用\r\n```javascript\r\nrouter.beforeEach(function(){\r\n    window.scrollTo(0,0);\r\n});\r\n```\r\n- afterEach 在路由成功切换到激活状态时调用\r\n```javascript\r\nrouter.afterEach(function(transition){\r\n    console.log(transition);\r\n});\r\n```\r\n- router.redirect()  在找不到路由时跳转","cover":"/images/vue.jpg","link":"vue简明教程.html","preview":"\u003cp\u003e优雅、简洁的前端框架\u003c/p\u003e\n","title":"vue简明教程"},{"content":"\r\n- [代码执行可视化](http://pythontutor.com/visualize.html)\r\n- [js各种对比对照表](https://dorey.github.io/JavaScript-Equality-Table/)\r\n- [正则可视化](https://regexper.com/)\r\n- [css3动画代码](http://anicollection.github.io/#/)\r\n- [css选择器速查表](https://kimblim.dk/css-tests/selectors/)\r\n- [移动端开发经验汇总](https://github.com/doyoe/trip)\r\n- 项目管理\r\n    + [禅道](http://www.zentao.net/)\r\n    + [柠檬](http://www.lemonpm.com)\r\n    + [蒲公英](https://bug.pgyer.com/)\r\n- 常见免费api\r\n    + [百度api](http://apistore.baidu.com/)\r\n- [vue项目收藏](https://madewithvuejs.com/)\r\n- 图床\r\n    + [图床1](http://jiantuku.com/#/uploads?scope=all)\r\n    +  [图床2](http://mpic.lzhaofu.cn/) \r\n    + [图床3](http://www.tietuku.com/)\r\n- [markdown生成html](https://github.com/i5ting/tocmd.gem)\r\n","cover":"/images/tool.jpg","link":"常用前端资源汇总.html","preview":"\u003cp\u003e常用前端资源汇总\u003c/p\u003e\n","title":"常用前端资源汇总"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n- [学习目标](#学习目标)\r\n- [项目模板下载地址](#项目模板下载地址)\r\n- [步骤](#步骤)\r\n    - [步骤1 - 初始化项目](#步骤1---初始化项目)\r\n    - [步骤2 - 安装express第三方包](#步骤2---安装express第三方包)\r\n    - [步骤3 - 书写app.js代码](#步骤3---书写appjs代码)\r\n    - [步骤4 - 测试服务器代码是否成功](#步骤4---测试服务器代码是否成功)\r\n    - [步骤5 - 构建路由](#步骤5---构建路由)\r\n    - [步骤6 - 检测路由是否成功](#步骤6---检测路由是否成功)\r\n    - [步骤7 - 渲染模板](#步骤7---渲染模板)\r\n    - [步骤8 - 设置静态资源](#步骤8---设置静态资源)\r\n    - [步骤9 - 连接数据库](#步骤9---连接数据库)\r\n    - [步骤10 - 安装mysql第三方依赖](#步骤10---安装mysql第三方依赖)\r\n    - [步骤11 - 把mysql集成到express代码当中：](#步骤11---把mysql集成到express代码当中)\r\n    - [步骤12 - 把首页的数据换成动态](#步骤12---把首页的数据换成动态)\r\n    - [步骤13 - 删除功能实现](#步骤13---删除功能实现)\r\n    - [步骤14 - 添加功能实现](#步骤14---添加功能实现)\r\n    - [步骤15：编辑功能完成](#步骤15编辑功能完成)\r\n        - [编辑功能是最复杂的，注意事项如下：](#编辑功能是最复杂的注意事项如下)\r\n- [最终实现代码地址](#最终实现代码地址)\r\n- [待优化](#待优化)\r\n\r\n\u003c!-- /TOC --\u003e\r\n\r\n## 学习目标\r\n- 通过本项目熟悉express的用法\r\n- 通过本项目熟悉如何用node使用mysql\r\n\r\n## 项目模板下载地址\r\n[下载地址](https://github.com/black-pony/dairy_template)\r\n\r\n## 步骤\r\n### 步骤1 - 初始化项目\r\n执行`npm init -y`，修改package.json中的entry point为`app.js`\r\n\r\n```javascript\r\n{\r\n  \"name\": \"dairy\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"app.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"express\": \"^4.14.1\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n### 步骤2 - 安装express第三方包\r\n执行`npm install --save express`\r\n\r\n### 步骤3 - 书写app.js代码\r\n创建app.js文件，代码如下：\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\napp.get('/',function(req,res){\r\n    res.send('Hello World');\r\n});\r\napp.listen(3000,function(){\r\n    console.log('服务器开启成功，正在监听端口3000...');\r\n});\r\n```\r\n\r\n### 步骤4 - 测试服务器代码是否成功\r\n在命令行里面执行`node app.js`,通过浏览器测试代码是否成功\r\n\r\n### 步骤5 - 构建路由\r\n修改app.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\nvar router = require('./router');\r\napp.use(router);\r\napp.listen(3000,function(){\r\n    console.log('服务器开启成功，正在监听端口3000...');\r\n});\r\n```\r\n添加router.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nrouter.get('/',function(req,res){\r\n    res.send('首页');\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        res.send('添加页面 get');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        res.send('编辑页面 get');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    res.send('删除 get');\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n### 步骤6 - 检测路由是否成功\r\n使用postman把上面的这几个路由全部检测一下看是否都可以使用\r\n\r\n### 步骤7 - 渲染模板\r\n这里，我们使用的模板引擎是ejs,所以，我们先安装一下ejs第三方依赖\r\n```\r\nnpm install --save ejs\r\n```\r\n然后，我们在app.js当中加载进来ejs这个中间件：\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\napp.set('view engine','ejs');\r\nvar router = require('./router');\r\napp.use(router);\r\napp.listen(3000,function(){\r\n    console.log('服务器开启成功，正在监听端口3000...');\r\n});\r\n\r\n```\r\n\r\n我们把`index.html`,`edit.html`,`add.html`三个文件放到views文件夹当中，扩展名改成ejs\r\n\r\n接着，我们修改router.js的代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    res.render('index');\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        res.render('edit');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('编辑页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    res.send('删除 get');\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n### 步骤8 - 设置静态资源\r\n我们检测代码会发现，虽然首页，编辑页面，添加页面全部可以正常显示成功，但是它们都没有样式，所以我们现在设置一下静态资源\r\n\r\n修改app.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\napp.set('view engine','ejs');\r\napp.use(express.static('public'));\r\nvar router = require('./router');\r\napp.use(router);\r\napp.listen(3000,function(){\r\n    console.log('服务器开启成功，正在监听端口3000...');\r\n});\r\n```\r\n\r\n因为我们知道静态资源的文件夹是作为根文件夹，所以，我们把index.ejs,edit.ejs,add.ejs中的路径修改一下\r\n\r\n### 步骤9 - 连接数据库\r\n我们打开phpmyadmin,切换到sql界面如下：\r\n![](http://i1.piimg.com/567571/be28b74d7012c0c0.png)\r\n![](http://p1.bqimg.com/567571/6032260d812a03d5.png)\r\n\r\n把模板中的itcast_erit.sql用编辑器打开，把里面的文本全部拷贝到sqll界面当中，点击`执行`\r\n![](http://p1.bqimg.com/567571/6b6749862cbefddc.png)\r\n\r\n### 步骤10 - 安装mysql第三方依赖\r\n```\r\nnpm install --save mysql\r\n```\r\n\r\n### 步骤11 - 把mysql集成到express代码当中：\r\nrouter.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar mysql = require('mysql');\r\nvar connection = mysql.createConnection({\r\n    host:'127.0.0.1',\r\n    user:'root',\r\n    password:'root',\r\n    database:'itcast_eric'\r\n});\r\n\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    connection.query('select * from articles',function(err,rows,fields){\r\n        if(err)throw err;\r\n        console.log(rows);\r\n    });\r\n    res.render('index');\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        res.render('edit');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('编辑页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    res.send('删除 get');\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n### 步骤12 - 把首页的数据换成动态\r\n修改router.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar mysql = require('mysql');\r\nvar connection = mysql.createConnection({\r\n    host:'127.0.0.1',\r\n    user:'root',\r\n    password:'root',\r\n    database:'itcast_eric'\r\n});\r\n\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    connection.query('select * from articles',function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.render('index',{list:rows});\r\n    });\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        res.render('edit');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('编辑页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    res.send('删除 get');\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n修改`index.ejs`js代码如下：\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n  \u003clink rel=\"stylesheet\" href=\"/css/index.css\"\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"wrapper\"\u003e\r\n    \u003ch1\u003e首页\u003c/h1\u003e\r\n    \u003cul class=\"list\"\u003e\r\n      \u003c% for(var i=0;i\u003clist.length;i++){ %\u003e\r\n      \u003cli\u003e\r\n        \u003cspan class=\"num\"\u003e\u003c%= list[i].id %\u003e\u003c/span\u003e\u003cspan\u003e\u003c%= list[i].title %\u003e\u003c/span\u003e\u003ca class=\"delete\" href=\"/delete?id=\u003c%= list[i].id %\u003e\"\u003e删除\u003c/a\u003e\u003ca class=\"edit\" href=\"/edit?id=\u003c%= list[i].id %\u003e\"\u003e编辑\u003c/a\u003e\r\n      \u003c/li\u003e\r\n      \u003c% } %\u003e\r\n    \u003c/ul\u003e\r\n  \u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\n```\r\n\r\n这个时候我们访问浏览器会发现我们首页数据全部换成动态数据了\r\n\r\n### 步骤13 - 删除功能实现\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar mysql = require('mysql');\r\nvar connection = mysql.createConnection({\r\n    host:'127.0.0.1',\r\n    user:'root',\r\n    password:'root',\r\n    database:'itcast_eric'\r\n});\r\n\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    connection.query('select * from articles',function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.render('index',{list:rows});\r\n    });\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('添加页面 post');\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        res.render('edit');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('编辑页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    // res.send('删除 get');\r\n    var id = req.query.id;\r\n    connection.query(`delete from articles where id = ${id}`,function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.redirect('/');\r\n    });\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n### 步骤14 - 添加功能实现\r\n修改请求方法为post,请求的url为/add的相关代码：\r\n\r\nadd.ejs代码如下：\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n  \u003clink rel=\"stylesheet\" href=\"/css/index.css\"\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"wrapper\"\u003e\r\n    \u003ch1\u003e添加\u003c/h1\u003e\r\n    \u003cform method=\"POST\" action=\"/add\" enctype=\"multipart/form-data\"\u003e\r\n      \u003cdiv class=\"title\"\u003e\r\n        \u003cinput type=\"text\" placeholder=\"标题\" name=\"title\"\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv class=\"content\"\u003e\r\n        \u003ctextarea  id=\"\" cols=\"150\" rows=\"30\" placeholder=\"内容\" name=\"content\"\u003e\u003c/textarea\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv\u003e\r\n        \u003cinput type=\"submit\" value=\"提交\"\u003e\r\n      \u003c/div\u003e\r\n    \u003c/form\u003e\r\n  \u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\n```\r\n\r\napp.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\napp.set('view engine','ejs');\r\napp.use(express.static('public'));\r\nvar router = require('./router');\r\napp.use(router);\r\napp.listen(3000,function(){\r\n    console.log('服务器开启成功，正在监听端口3000...');\r\n});\r\n```\r\n\r\nrouter.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar multer  = require('multer')\r\nvar upload = multer({ dest: 'uploads/' })\r\nvar mysql = require('mysql');\r\nvar connection = mysql.createConnection({\r\n    host:'127.0.0.1',\r\n    user:'root',\r\n    password:'root',\r\n    database:'itcast_eric'\r\n});\r\n\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    connection.query('select * from articles',function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.render('index',{list:rows});\r\n    });\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(upload.any(),function(req,res){\r\n        var fields = req.body;\r\n        connection.query(`insert into articles(title,content) values (\"${fields.title}\",\"${fields.content}\")`,function(err,result){\r\n            if(err)throw err;\r\n            // console.log(result);\r\n            res.redirect('/');\r\n        });\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        res.render('edit');\r\n      })\r\n      .post(function(req,res){\r\n        res.send('编辑页面 post');\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    // res.send('删除 get');\r\n    var id = req.query.id;\r\n    connection.query(`delete from articles where id = ${id}`,function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.redirect('/');\r\n    });\r\n\r\nmodule.exports = router;\r\n```\r\n### 步骤15：编辑功能完成\r\n#### 编辑功能是最复杂的，注意事项如下：\r\n- textarea里面的内容涉及到换行、单双引号等，所以需要用encodeURIComponent转义\r\n-  在显示的时候相应的使用decodeURIComponent\r\n\r\nedit.ejs代码如下：\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n  \u003cmeta charset=\"UTF-8\"\u003e\r\n  \u003ctitle\u003eDocument\u003c/title\u003e\r\n  \u003clink rel=\"stylesheet\" href=\"/css/index.css\"\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n  \u003cdiv class=\"wrapper\"\u003e\r\n    \u003ch1\u003e编辑\u003c/h1\u003e\r\n    \u003cform method=\"POST\" action=\"/edit\" enctype=\"multipart/form-data\"\u003e\r\n      \u003cdiv class=\"title\"\u003e\r\n        \u003cinput type=\"text\" placeholder=\"标题\" name=\"title\" value=\"\u003c%= title %\u003e\"\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv class=\"content\"\u003e\r\n        \u003ctextarea  id=\"\" cols=\"150\" rows=\"30\" placeholder=\"内容\" name=\"content\"\u003e\u003c%= content %\u003e\u003c/textarea\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv\u003e\r\n        \u003cinput type=\"hidden\" value=\"\u003c%= id %\u003e\" name=\"id\"\u003e\r\n        \u003cinput type=\"submit\" value=\"提交\"\u003e\r\n      \u003c/div\u003e\r\n    \u003c/form\u003e\r\n  \u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\n```\r\n\r\nrouter.js代码如下：\r\n```javascript\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar mysql = require('mysql');\r\nvar connection = mysql.createConnection({\r\n    host:'127.0.0.1',\r\n    user:'root',\r\n    password:'root',\r\n    database:'itcast_eric'\r\n});\r\n\r\nrouter.get('/',function(req,res){\r\n    // res.send('首页');\r\n    connection.query('select * from articles',function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.render('index',{list:rows});\r\n    });\r\n});\r\nrouter.route('/add')\r\n      .get(function(req,res){\r\n        // res.send('添加页面 get');\r\n        res.render('add');\r\n      })\r\n      .post(function(req,res){\r\n        // console.log(req.fields);\r\n        // res.send('添加页面 post');\r\n        connection.query(`insert into articles(title,content) values (\"${req.fields.title}\",\"${req.fields.content}\")`,function(err,result){\r\n            if(err)throw err;\r\n            // console.log(result);\r\n            res.redirect('/');\r\n        });\r\n      });\r\nrouter.route('/edit')\r\n      .get(function(req,res){\r\n        // res.send('编辑页面 get');\r\n        var id = req.query.id;\r\n        connection.query(`select * from articles where id = ${id} limit 1`,function(err,rows,fields){\r\n            if(err)throw err;\r\n            // console.log(rows);\r\n            res.render('edit',{id:rows[0].id,title:rows[0].title,content:decodeURIComponent(rows[0].content)});\r\n        });\r\n      })\r\n      .post(upload.any(),function(req,res){\r\n        // res.send('编辑页面 post');\r\n        var fields = req.body;\r\n        connection.query(`update articles set title=\"${fields.title}\",content=\"${encodeURIComponent(fields.content)}\" where id = ${fields.id}`,function(err,result){\r\n            if(err)throw err;\r\n            console.log(result);\r\n            res.redirect('/');\r\n        });\r\n      });\r\nrouter.get('/delete',function(req,res){\r\n    // res.send('删除 get');\r\n    var id = req.query.id;\r\n    connection.query(`delete from articles where id = ${id}`,function(err,rows,fields){\r\n        if(err)throw err;\r\n        // console.log(rows);\r\n        res.redirect('/');\r\n    });\r\n});\r\nmodule.exports = router;\r\n```\r\n\r\n## 最终实现代码地址\r\n[下载地址](https://github.com/black-pony/dairy)\r\n\r\n\r\n## 待优化\r\n- 把数据模型相关的代码提取出来\r\n- 使用orm2","cover":"/images/express.jpg","link":"express实现留言本项目.html","preview":"\u003cp\u003eexpress是一个轻量级的node.js框架\u003c/p\u003e\n","title":"express实现留言本项目"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n- [安装](#安装)\r\n- [演示代码](#演示代码)\r\n- [使用命令](#使用命令)\r\n- [测试](#测试)\r\n- [使用注意事项](#使用注意事项)\r\n\r\n\u003c!-- /TOC --\u003e\r\n## 安装\r\n```\r\nnpm install -g browser-sync\r\n```\r\n\r\n## 演示代码\r\nindex.html\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\r\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\r\n    \u003ctitle\u003eDocument\u003c/title\u003e\r\n    \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\r\n    \u003cstyle\u003e\r\n        #demo{\r\n            display: none;\r\n        }\r\n    \u003c/style\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cinput type=\"button\" value=\"点击弹框\" id=\"btn\"\u003e\r\n    \u003cdiv id=\"demo\"\u003e\r\n        点击显示隐藏内容\r\n    \u003c/div\u003e\r\n    \u003cscript\u003e\r\n        window.onload = function(){\r\n            var oDemo = document.querySelector('#demo');\r\n            var oBtn = document.querySelector('#btn');\r\n            oBtn.addEventListener('click',function(){\r\n                oDemo.style.display = 'block';\r\n            },false);\r\n        }\r\n    \u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\nstyle.css\r\n```css\r\nbody{\r\n    background:red;\r\n}\r\n```\r\n\r\n## 使用命令\r\n```\r\nbrowser-sync start --server --files \"*.*\"\r\n```\r\n\r\n## 测试\r\n1. 点击按钮\r\n2. 把style.css中的background改成其他颜色，观察页面的反应\r\n\r\n## 使用注意事项\r\n- 文件名一定要用双引号，不要用单引号\r\n- html文件一定要有骨架结构","cover":"/images/brower-sync.jpg","link":"browser-sync使用总结.html","preview":"\u003cp\u003ebrowser-sync是一个用来提高我们异步测试浏览器兼容性的工具。\u003c/p\u003e\n","title":"browser-sync总结"},{"content":"\n\n## 为什么要对代码进行版本控制\n\n### 场景一\n你现在去上班了，在做一个项目，你按照产品的需要说明完成了功能，然后你拿过去给你的产品经理看，产品经理看完以后感觉有些地方不是特别的满意，然后就让你进行修改，你按产品经理的意愿回去修改了几版，但是他最后说你这一版还不如前面那一版好看，不行就用前面一版吧，但是这个时候你发现，你之前改的代码你不记得是怎么写的了~~~\n\n### 场景二\n你现在去上班了，被公司的领导分配到了一个技术小组当中，你们团队五六个人一起在开发一个项目，每个人分配到不同的需求，同时在写代码，最后你们的代码写完了，悲剧的是，你们想合并一下代码，但是由于好多文件是由很多人同时在进行修改，不知道到底要用哪个代码，害怕把对方的代码覆盖掉了~~~\n\n### 一个不太成熟的想法\n![为什么要使用版本控制软件](/images/git_01.png)\n\n### 更科学的方式\n把项目开发中的每个人的每一次微小的修改记录下来，这样可以根据记录的历史随意的切换到任意一个时间点的代码的状态：\n\n版本 | 用户 | 说明 | 日期 | 修改的代码\n---------|----------|---------|---------|---------\n 001 | zhengwei | 2016-9-1 10:20 | 添加了首页component | `import HomePage from '@/Component/HomePage.vue'`\n 002 | nll | 2016-9-1 10:22 | 添加了路由 | `Vue.use(router)`\n 003 | yevon | 2016-9-2 11:33 | 添加了ajax代码 | `created:fetch('http://localhoast:8080/getData')`\n\n### 通俗的理解\ngit就是一个时光机，我们可以随意的切换到代码的任意一个历史版本\n![](/images/timg.jpg)\n\n## 常用的版本控制软件\n\n### 按类型划分\n\n#### 集中式\n![集中式版本控制](/images/centralized.png)\n##### 常见的代表\nsvn(如果对svn感兴趣或者以后公司用得上的可以参考[svg资料](http://pan.baidu.com/s/1c2zPt9Q))\n#### 分布式\n![分布式版本控制](/images/distributed.png)\n##### 常见的代表\ngit\n\n## 集中式 vs 分布式\n- 集中式严重依赖于版本控制服务器，如果不能上网或者服务器挂了，则当前的代码不能进行版本管理，相反，分布式可以在当前的电脑进行版本控制\n- 如果服务器挂了，则集中式的代码好多将永久性损坏，而分布式只要有一台电脑是好的，大部分代码是可以找回来的\n\n## git安装\n### windows电脑安装\n[git安装](http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html)\n### mac电脑\nmac电脑内置了git软件\n\n### git bash使用注意事项\n- 打开方式：在当前项目文件夹中，右键 --\u003e git bash打开\n- 可以按住ctrl+鼠标滚轮进行放大缩小 \n\n## 配置用户信息\n为了标识出每一个小的修改是谁修改的，我们需要在使用git之前做一些配置\n```\n$ git config --global user.name \"zhengwei1949\"\n$ git config --global user.email zhengwei1949@qq.com\n```\n\n### 注意\n- 上面的$大家在敲命令的时候，一定不要输\n- 用户名如果没有空格隔开，不需要加双引号\n- 建议加上--global配置项，这是一个你的电脑全局性的配置，以后任何项目文件夹在初始化git的时候都不用管这个了\n\n### 查看是否设置正确\n```\ngit config user.name\n```\n\nand\n\n```\ngit config user.email\n```\n\nor\n\n```\ngit config --list\n```\n\n## 创建git项目\n```\ngit init\n```\n\n![初始化git仓库](/images/git_init.png)\n\n## 将代码提交到仓库当中\n### 工作区、暂存区、仓库\n![](/images/areas.png)\n\n### 一个文件的生命周期\n![一个文件的生命周期](/images/lifecycle.png)\n\n### 将代码提交到仓库的步骤\n1. 执行`git add a.html`\n2. 执行`git commit \"添加a.html到仓库当中\"`\n\n### 查看当前代码的状态\n```\ngit status\n```\n\n#### 如何知道是哪个状态\n- 看颜色法：红色代表处于工作区、绿色代表片于暂存区、白色代表添加到了仓库\n- 看单词\n    + untracked files --\u003e 处于工作区(新增文件)\n    + changes not staged for commited --\u003e 文件被修改，未保存到暂存区\n    + changes to be committed --\u003e 处于暂存区，尚未添加到仓库当中\n\n#### 命令简化\n- `git add .` --\u003e 添加所有处于工作区文件到暂存区\n- `git commit -a -m \"添加所有修改的文件直接从工作区到仓库\"`\n\n## git忽略文件\n把一些没有必要添加到仓库的文件在`.gitignore`当中设置一下\n\n```\n.idea\n.temp\n```\n\n## 版本回退\n\n### 理解版本\n![分支](/images/fenzhi.png)\n### 文件差异对比\n1. 以工作区为基准，如果暂存区当中添加这个文件但尚未添加到仓库，则比较的是工作区与暂存区，如果暂存区的添加到了仓库，则比较工作区与仓库\n```\ngit diff\n```\n\n2. 比较暂存区与仓库代码的区别\n```\ngit diff --cached\n```\n\n### 日志的查看\n```\ngit log\n```\n\n### 版本回退\n![版本回退图](/images/git-reset.jpg)\n![版本回退图](/images/git_reset.gif)\n```\ngit reset --hard HEAD~0 --\u003e 放弃所有的当前工作区与暂存区代码，回退到与仓库代码一致\ngit reset --hard HEAD~1 --\u003e 切换到上一次仓库代码\ngit reset --hard HEAD~2 --\u003e 切换到上上一次仓库代码\n```\n\n### 查看所有的版本号\n```\ngit reflog\n```\n### 根据版本号进行对比\n```\ngit diff 版本号1 版本号2\n```\n\n### 根据版本号进行回退\n```\ngit reset --hard 版本号\n```\n\n## 配置别名\n```\n$ git config --global alias.st status\n$ git config --global alias.ci commit\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit\"\n```\n\n## 分支\n![分支模型](/images/lr-branches-2.png)\n在版本回退里，每次提交，Git会把它们串成一条时间线，这条时间线就是一个分支。截止目前，只有一条时间线，在Git里，这条分支叫主分支，即`master`分支。HEAD严格来说不是指向提交，而是指向`master`,`master`才是指向提交的，所以`HEAD`指向的就是当前分支。\n一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用HEAD指向`master`,就能确定当前分支，以及当前分支的提交点。\n\n### 创建分支\n```\ngit branch 分支名\n```\n\n### 切换分支\n```\ngit checkout 分支名\n```\n\n#### 注意：\n切换分支的时候，一定要把当前的仓库的不是在仓库里面的代码提交到仓库(工作区、暂存区)\n\n### 删除分支\n```\ngit branch -d 分支名\n```\n\n### 创建并切换分支\n```\ngit checkout -b 分支名\n```\n\n## 合并分支\n```\ngit merge 分支名\n```\n\n### 如何判断出现了冲突\n```\nCONFLIT   \n```\n\n#### 冲突的原因\n两个不同的分支修改了同一个文件的同一行代码，当他们需要合并(git merge)的时候，就会有冲突\n\n#### 冲突什么情况下会出现？\n- git merge的时候 --\u003e 也就是分支进行合并的时候，对比两个文件有没有修改同一行代码\n\n### 本地模拟冲突\n#### 实验一\na分支上面没有这一行代码，b分支上多了这一行 --\u003e 不会冲突\n#### 实验二\na分支和b分支上都多了这一行，但是代码是相同的 --\u003e 不会冲突\n#### 实验三\na分支和b分支上都多了这一行，但是代码是不同的 --\u003e 冲突\n\n#### 如何解决冲突\n1. 确定我们最终要的代码\n2. 执行`git add .`\n3. 执行`git commit -m '提交信息'`\n\n## git练习\n- 可以玩下level 1就行了 [git在线练习](https://www.codeschool.com/learn/git)\n\n## github\n[使用github](http://jingyan.baidu.com/article/f7ff0bfc7181492e27bb1360.html)\n\n## github工作流\n```\ngit init\ngit add .\ngit commit -m '代码提交注释'\ngit remote add origin 仓库地址\ngit push -u origin master\n```\n\n## github配置ssh\n[配置github的ssh](http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html)\n\n## github工作流(更通用版)\n```\ngit clone 仓库地址(或者git init + git remote add origin 仓库地址 + git pull)\ngit add .\ngit commit -m '代码提交注释'\ngit push -u origin master\n```\n\n## 推送到远程服务器的时候出现拒绝(rejected)\n\n### 本地代码能推送的前提\n- 本地的项目必须是基于远程Repository代码的基础上修改的\n\n### 提交到github被拒绝\n#### 什么情况下出现rejected\n- 本地代码很旧了，线上的代码有了最新其他的用户提交的最新的代码\n\n#### 解决的办法\n- 将远程Repository中的代码git pull拉取到本地(git pull会给我们自动做一个merge,如果出现冲突会提示)\n- 然后再进行Push，即可完成代码提交\n\n#### 远程模拟冲突\n1. 创建一个github仓库\n2. 克隆到本地\n3. 在本地创建一个新的文件\n4. 推送到服务器上面\n5. 在服务器上改代码\n6. 尝试修改本地代码，推送到服务器上面\n\n#### 如何解决rejected\n1. 执行`git pull origin master`\n2. 执行`git add .`\n3. 执行`git commit -m 'abc'`\n4. 执行`git push`\n\n## tortoiseGit的使用\n### 优点\n`git add .`,`git commit -m 'wfe'`,`git push`合并成一步 ==\u003e 右键 --\u003e git提交\n\n## git常见问题汇总\n[git常见问题汇总](https://github.com/zhengwei1949/git-tips)\n\n## git常用命令汇总\n\n命令 | 含义\n---------|----------\n git init | 初始化仓库\n git add . | 把工作区中未保存的文件保存到暂存区\n git commit -m '注释' | 把文件从暂存区提交到仓库\n git status | 查看当前仓库的状态(红色代表的工作区有代码未保存到暂存区，绿色代表有代码未提交到仓库)\n git diff | 查看工作区与暂存区、仓库代码的区别\n git diff --cached | 查看暂存区与仓库代码的区别\n git diff 版本号1 版本号2 | 对比两个版本号的区别 \n git log | 查看提交日志\n git reset --hard HEAD | 撤销当前工作区、暂存区的修改 \n git reset --hard HEAD~0 | 撤销当前工作区、暂存区的修改 \n git reset --hard HEAD~1 | 切换到上一次提交的代码状态\n git reset --hard 版本号 | 切换到某版本号的提交\n git branch 分支名 | 创建分支\n git checkout 分支名 | 切换分支\n git branch -d 分支名 | 删除分支\n git merge 分支名 | 合并分支\n git remote add origin 远程服务器地址 | 提交到远程服务器\n git push -u origin master | 简写push命令(第一次提交)\n git push | 简写push命令(以后的提交)","cover":"/images/github.jpg","link":"git总结.html","preview":"\u003cp\u003eGit是一款开源的版本控制管理工具，它以快速、高效的特点被广泛应用在项目代码的团队协作当中。GitHub是一个使用Git托管的开源代码技术社区，几乎所有我们知道的开源库(框架)都可以去GitHub上面找到相关的下载地址，使用并参与到GitHub上不仅可以帮助我们获取第一手的技术资料、了解最新的技术走向，而且还可以利用GitHub进行代码的托管和管理，对技术人员来说是一个绝佳的学习平台。本文内容将聚焦如何快速入门git和github,主要涉及到git相关概念的理解，常用命令的使用介绍,github网站的使用介绍,常见的git学习资源等\u003c/p\u003e\n","title":"git总结"},{"content":"\r\n\u003c!-- TOC --\u003e\r\n\r\n- [概念理解](#概念理解)\r\n- [what is package](#what-is-package)\r\n- [what is module](#what-is-module)\r\n- [package和module的关系](#package和module的关系)\r\n- [常见命令总结](#常见命令总结)\r\n- [升级node](#升级node)\r\n    - [mac电脑](#mac电脑)\r\n    - [windows电脑](#windows电脑)\r\n- [npm用不了怎么办](#npm用不了怎么办)\r\n- [semantic versioning](#semantic-versioning)\r\n    - [a.b.c的含义](#abc的含义)\r\n- [在package.json中的体现](#在packagejson中的体现)\r\n- [package.json说明](#packagejson说明)\r\n- [解决下载npm包慢的问题](#解决下载npm包慢的问题)\r\n    - [方式一 使用taobao源](#方式一-使用taobao源)\r\n    - [使用步骤](#使用步骤)\r\n    - [方式二 使用nrm](#方式二-使用nrm)\r\n\r\n\u003c!-- /TOC --\u003e\r\n\u003e 本文翻译自`https://docs.npmjs.com`\r\n\r\n## 概念理解\r\n- package 是一个被`package.json`描述文件或者文件夹\r\n- module  是一个可以通过`Node.js`的`require`来引用的文件或者文件夹(当然前端的直接通过script引入这里不提)\r\n\r\n## what is package\r\n- 一个包含`package.json`的文件夹\r\n- 一个已经放到`npmjs.org`上面的，可以通过`npm install --save \u003cname\u003e@\u003cversion\u003e`下载的东西\r\n\r\n## what is module\r\n- 包含`package.json`且里面带有`main`属性的的一个文件夹\r\n- 包含`index.js`的文件夹\r\n- 一个JavaScript文件\r\n\r\n## package和module的关系\r\n大部分时候我们说二者是等价的，但有一些cli工具型的package不包含main属性是作为前端工具来使用的，所以不算是module\r\n\r\n## 常见命令总结\r\n\r\n命令 | 含义 \r\n---------|----------\r\n npm init | 交互式的创建`package.json`文件\r\n npm init -y| 默认创建`package.json`文件 \r\n npm install packageName --save、-S | 安装库(框架)、node第三方包,也可以写成npm install --save packageName\r\n npm install packageName --save-dev、-D | 安装当前项目的前端构建工具等(gulp,babel)\r\n npm install -g packageName | 全局安装前端工具(browser-sync,gulp-cli,vue-cli,react-cli之类)\r\n npm uninstall -g、--save|--save-dev | 卸载包\r\n npm docs packageName | 查看某库(框架)、Node第三方包的官网、描述信息\r\n npm install -g npm@latest | 更新npm版本到最新(自己没测过，不知是否有效)\r\n npm shrinkwrap | 锁定你当前安装的npm包的版本\r\n npm ls | 打印出来所有当前电脑安装的npm包\r\n npm config list | 我主要是用来查看当前电脑所使用的源地址(registry)\r\n npm root | 打印出来当前项目文件夹的node_modules的路径\r\n npm cache clean | 清除npm的缓存\r\n npm update | 升级本地包\r\n npm outdated | 查看哪些本地包有更新的版本\r\n npm update -g packageName | 升级全局包\r\n npm outdated -g --depth=0 | 查看哪些包有更新的版本\r\n\r\n\r\n## 升级node\r\n### mac电脑\r\n```\r\nbrew install node\r\n```\r\n### windows电脑\r\n直接卸载旧的，安装最新的msi文件\r\n\r\n## npm用不了怎么办\r\n重装node的msi软件\r\n\r\n## semantic versioning\r\n### a.b.c的含义\r\n- 主版本号.次版本号.修订号\r\n- Bug修复及极其小的改动 --\u003e 增加最后一个数字 1.0.0 --\u003e 1.0.1\r\n- 添加了新的功能特性，但没有破坏旧的API --\u003e 增加中间的数字 1.0.0 --\u003e 1.1.0\r\n- 完全重构，不能向后兼容 --\u003e 增加首尾数字 1.0.0 --\u003e 2.0.0\r\n\r\n## 在package.json中的体现\r\n- 打补丁 --\u003e 1.0,1.0.x,~1.0.4\r\n- 小的改动 --\u003e 1,1.x,^1.0.4\r\n- 大的改动 --\u003e * , x\r\n\r\n![semver对照表](/images/semver.png)\r\n\r\n\r\n## package.json说明\r\n\r\n配置项 | 配置说明\r\n---------|----------\r\n name | 当前包的名字，不能超过214个字符，不能包含.,_,不能有大写字符，不能和核心模块重名，\r\n version | 当前包的版本号，在npmjs.org上面，名字@版本号一定是唯一的标识，版本号必须符合semver\r\n description | 关于当前包的功能的描述\r\n keywords | 当前包的描述的关键词，有利于在npmjs.org进行搜索的时候可以搜索出来 \r\n homepage | 当前包的官网\r\n bugs | 如果你的包有bug,别的用户可以在这里提交issue\r\n license | 指定你的包使用的证书类型\r\n author | 作者\r\n contributors | 贡献者 \r\n files | 指定你的包必须包含的一些文件\r\n bin | npm会软链接到./node_modules/.bin下面\r\n main | 指定入口文件，如果没写默认是index.js\r\n repository | 指定你的包的仓库地址\r\n scripts | 指定可以执行的脚本 \r\n config | 可以在scripts的脚本当中，通过npm_package_config_xxx变量来访问 \r\n dependencies | 依赖项\r\n devDepencies | 像一些编译coffeescript,less,sass的包都安装在这里面\r\n\r\n## 解决下载npm包慢的问题\r\n### 方式一 使用taobao源\r\n[taobao镜像](https://npm.taobao.org/)一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\r\n### 使用步骤\r\n1. 执行`npm install -g cnpm --registry=https://registry.npm.taobao.org`\r\n2. 把以前`npm install packageName`替换成`cnpm install packageName`\r\n\r\n### 方式二 使用nrm\r\n1. 执行`npm install -g nrm`\r\n2. 执行`nrm test`测试哪个镜像源下载速度最快\r\n```\r\nC:\\Users\\Administrator\u003enrm test\r\n\r\n*  npm ---- Fetch Error\r\n  cnpm --- 364ms\r\n  taobao - 159ms\r\n  nj ----- Fetch Error\r\n  rednpm - 256ms\r\n  npmMirror  Fetch Error\r\n  edunpm - Fetch Error\r\n```\r\n3. 通过测试我们发现，taobao是快，把镜像切换到taobao\r\n```\r\nnrm use taobao\r\n```\r\n4. 以后使用的时候，还是执行`npm install packageName`,但是下载的时候默认会从淘宝镜像去下载\r\n\r\n","cover":"/images/npm.svg","link":"npm总结.html","preview":"\u003cp\u003enpm可以作为前端库(框架)的下载工具，也可以作为Node.js项目的包管理工具。\u003c/p\u003e\n","title":"npm总结"}]